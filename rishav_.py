# -*- coding: utf-8 -*-
"""Rishav .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tm_zpxf5A4APkobFa0LYVqbKdzaqpNYM
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sb

from google.colab import files
uploaded = files.upload()
input=list(uploaded.keys())
input=input[0]

dataset=pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv',nrows=1000)
dataset.head()

dataset.info()

types = dataset.dtypes
print(types)

dataset.describe()

class_counts = dataset.groupby('Churn').size()

print(class_counts)

from matplotlib import pyplot
dataset.hist()
pyplot.show()

dataset.plot(kind='density' ,subplots=True, layout=(2,2), sharex=False)
pyplot.show()

# Extracting dependent and independent variables:
# Extracting independent variable:
X = dataset.iloc[:,1:20].values
# Extracting dependent variable:
y = dataset.iloc[:, 20].values

print(X)

print(y)

dataset.isnull().sum()

dataset.nunique()

sb.catplot(data=dataset, kind='count', x='Churn', order=['Yes','No'], col='gender')

sb.catplot(data=dataset, kind='count', x='Churn', order=['Yes','No'], col='InternetService')
sb.catplot(data=dataset, kind='count', x='Churn', order=['Yes','No'], col='OnlineSecurity')
sb.catplot(data=dataset, kind='count', x='Churn', order=['Yes','No'], col='TechSupport')
sb.catplot(data=dataset, kind='count', x='Churn', order=['Yes','No'], col='Contract')

sb.catplot(data=dataset, kind='count', x='Churn', order=['Yes','No'], col='PaymentMethod')

from sklearn.preprocessing import LabelEncoder
labelencoder_X = LabelEncoder()
X[:, 0] = labelencoder_X.fit_transform(X[:, 0])

from sklearn.preprocessing import LabelEncoder
labelencoder_X = LabelEncoder()
X[:, 2] = labelencoder_X.fit_transform(X[:, 2])

from sklearn.preprocessing import LabelEncoder
labelencoder_X = LabelEncoder()
X[:, 3] = labelencoder_X.fit_transform(X[:, 3])

print(X)

from sklearn.preprocessing import LabelEncoder
labelencoder_X = LabelEncoder()
for i in range(5,17):
  X[:, i] = labelencoder_X.fit_transform(X[:, i])

print(X)

print(y)

from sklearn.preprocessing import LabelEncoder
labelencoder_y = LabelEncoder()
y[:] = labelencoder_y.fit_transform(y[:])

y=y.astype(int)

print(y)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)

print(X_train)

print(y_train)

print(X_test)

print(y_test)

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)
print(X_train)

print(X_test)

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier

model = LogisticRegression()
model.fit(X_train,y_train)
model.score(X_test, y_test)

svm = SVC()
svm.fit(X_train, y_train)
svm.score(X_test, y_test)

rf = RandomForestClassifier()
rf.fit(X_train, y_train)
rf.score(X_test, y_test)

from sklearn.model_selection import GridSearchCV
model_params = {
    'random_forest': {
        'model': RandomForestClassifier(),
        'params' : {
            'n_estimators': [1,5,10]
        }
    }
}

scores = []

for model_name, mp in model_params.items():
    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)
    clf.fit(X, y)
    scores.append({
        'model': model_name,
        'best_score': clf.best_score_,
        'best_params': clf.best_params_
    })
    
df = pd.DataFrame(scores,columns=['model','best_score','best_params'])
df

model = RandomForestClassifier(n_estimators=20)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_pred

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print('Confusion matrix: ')
print(cm)

from sklearn.metrics import accuracy_score
print('Accuracy: %.2f' % (accuracy_score(y_test, y_pred)*100))

from sklearn.metrics import precision_score
precision = precision_score(y_test, y_pred, average='binary')
print('Precision: %.3f' % (precision*100))

from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
recall = recall_score(y_test, y_pred, average='binary')
print('Recall: %.3f' % (recall*100))

score = f1_score(y_test, y_pred, average='binary')
print('F-Measure: %.3f' % (score*100))

# Mounting Google Drive
from google.colab import drive
drive.mount('/content/drive')

import pickle
print("[INFO] Saving model...")
saved_model=pickle.dump(model,open('/content/drive/My Drive/pietmodel.pkl', 'wb'))

model = pickle.load(open('/content/drive/My Drive/pietmodel.pkl','rb'))  
# Load the pickled model 
#Dec_from_pickle = pickle.loads(saved_model) 
  
# Use the loaded pickled model to make predictions 
model.predict(X_test)

import joblib
filename = '/content/drive/My Drive/pietmodel.sav'
joblib.dump(model, filename)
 
# some time later...
 
# load the model from disk
loaded_model = joblib.load(filename)
result = loaded_model.score(X_test, y_test)
print(result)

!pip install streamlit

# Load the pickled model
import pickle
pickle_in = open("/content/drive/My Drive/pietmodel.pkl","rb")
model=pickle.load(pickle_in)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st 
# from PIL import Image
# import pickle
# import numpy as np
# import matplotlib.pyplot as plt
# import pandas as pd
# st.set_option('deprecation.showfileUploaderEncoding', False)
# # Load the pickled model
# pickle_in = open("/content/drive/My Drive/pietmodel.pkl","rb")
# model=pickle.load(pickle_in)
# dataset= pd.read_csv('/content/drive/My Drive/WA_Fn-UseC_-Telco-Customer-Churn.csv',nrows=1000)
# X = dataset.iloc[:,1:20].values
# 
# from sklearn.preprocessing import LabelEncoder
# labelencoder_X = LabelEncoder()
# X[:, 0] = labelencoder_X.fit_transform(X[:, 0])
# 
# from sklearn.preprocessing import LabelEncoder
# labelencoder_X = LabelEncoder()
# X[:, 2] = labelencoder_X.fit_transform(X[:, 2])
# 
# from sklearn.preprocessing import LabelEncoder
# labelencoder_X = LabelEncoder()
# X[:, 3] = labelencoder_X.fit_transform(X[:, 3])
# 
# from sklearn.preprocessing import LabelEncoder
# labelencoder_X = LabelEncoder()
# for i in range(5,17):
#   X[:, i] = labelencoder_X.fit_transform(X[:, i])
# 
# 
# from sklearn.preprocessing import StandardScaler
# sc = StandardScaler()
# X = sc.fit_transform(X)
# 
# def predict_note_authentication(gender	,SeniorCitizen,	Partner,	Dependents,	tenure,	PhoneService,
#                                 MultipleLines,	InternetService,	OnlineSecurity,	OnlineBackup,	DeviceProtection,	TechSupport,
#                                 StreamingTV	,StreamingMovies,Contract,PaperlessBilling,PaymentMethod,MonthlyCharges,TotalCharges):
#   output= model.predict(sc.transform([[gender	,SeniorCitizen,	Partner,	Dependents,	tenure,	PhoneService,
#                                 MultipleLines,	InternetService,	OnlineSecurity,	OnlineBackup,	DeviceProtection,	TechSupport,
#                                 StreamingTV	,StreamingMovies,Contract,PaperlessBilling,PaymentMethod,MonthlyCharges,TotalCharges]]))
#   print("Customer will leave =", output)
#   if output==[1]:
#     prediction="Customer will Leave"
#   else:
#     prediction="Customer will not Leave"
#   print(prediction)
#   return prediction
# def main():
#     
#     html_temp = """
#    <div class="" style="background-color:brown;" >
#    <div class="clearfix">           
#    <div class="col-md-12">
#    <center><p style="font-size:40px;color:white;margin-top:10px;">Poornima Institute of Engineering & Technology</p></center> 
#    <center><p style="font-size:30px;color:white;margin-top:10px;">Department of Computer Engineering</p></center> 
#    <center><p style="font-size:25px;color:white;margin-top:10px;">Machine Learning Project</p></center> 
#    </div>
#    </div>
#    </div>
#    """
#     st.markdown(html_temp,unsafe_allow_html=True)
#     st.header("Telco-Customer Prediction")
# 
#     gender=st.number_input('Insert 0 For Male 1 For Female ',0,1)
#     SeniorCitizen=st.number_input('Insert a SeniorCitizen 0 For No 1 For Yes',0,1)
#     Partner=st.number_input('Insert a Partner 0 For No 1 For Yes',0,1)
#     Dependents=st.number_input('Insert a Dependents 0 For No 1 For Yes',0,1)
#     tenure=st.number_input('Insert a tenure',0)
#     PhoneService=st.number_input('Insert a PhoneService 0 For No 1 For Yes',0,1)
#     MultipleLines=st.number_input('Insert a MultipleLines 0 For No 1 For Yes 2 For No phone service',0,1)
#     InternetService=st.number_input('Insert a InternetService 0 For No 1 For DSL 2 For Fiber Optics ',0,2)
#     OnlineSecurity=st.number_input('Insert a OnlineSecurity 0 For No 1 For Yes 2 No Internet service ',0,2)
#     OnlineBackup=st.number_input('Insert a OnlineBackup 0 For No 1 For Yes 2 No Internet service ',0,2)
#     DeviceProtection=st.number_input('Insert a DeviceProtection 0 For No 1 For Yes 2 No Internet service ',0,2)
#     TechSupport=st.number_input('Insert a TechSupport 0 For No 1 For Yes 2 No Internet service ',0,2)
#     StreamingTV=st.number_input('Insert a StreamingTV 0 For No 1 For Yes 2 No Internet service ',0,2)
#     StreamingMovies=st.number_input('Insert a StreamingMovies 0 For No 1 For Yes 2 No Internet service ',0,2)
#     Contract=st.number_input('Insert a Contract 0 For Month-to-month 1 For one year 2 For Two year ',0,2)
#     PaperlessBilling=st.number_input('Insert a PaperlessBilling 0 For No 1 For Yes',0,1)
#     PaymentMethod=st.number_input('Insert a PaymentMethod 0 For Electronic check 1 For Mailed check 2 For Bank transfer 3 For Credit card ',0,3)
#     MonthlyCharges=st.number_input('Insert a MonthlyCharges',0)
#     TotalCharges=st.number_input('Insert a TotalCharges',0)
#     
#     
#     resul=""
#     if st.button("Predict"):
#       result=predict_note_authentication(gender	,SeniorCitizen,	Partner,	Dependents,	tenure,	PhoneService,
#                                 MultipleLines,	InternetService,	OnlineSecurity,	OnlineBackup,	DeviceProtection,	TechSupport,
#                                 StreamingTV	,StreamingMovies,Contract,PaperlessBilling,PaymentMethod,MonthlyCharges,TotalCharges)
#       st.success('Model has predicted {}'.format(result))
#     if st.button("About"):
#       st.subheader("Developed by Rishav Bansal")
#       st.subheader("Section-C,PIET")
# 
# if __name__=='__main__':
#   main()
#    
#

!nohup streamlit run  app.py &

!pip install pyngrok

!ngrok authtoken 1tI1g9A5Vp2Sf55XK0oJOjqR6xw_7c1VgrzbHDc6XiYfCdA6u

from pyngrok import ngrok
url=ngrok.connect(port='8050')
url

!streamlit run --server.port 80 app.py











